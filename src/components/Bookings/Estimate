
import { useState } from 'react';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Badge } from "@/components/ui/badge";
import { 
  Share2, 
  MessageCircle, 
  Mail, 
  Copy, 
  Phone,
  ExternalLink,
  Check
} from "lucide-react";
import { useToast } from '@/hooks/use-toast';
import type { FareCalculationResult } from '@/lib/fareCalculator';

interface ShareEstimateDialogProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  fareResult: FareCalculationResult;
  pickup: string;
  dropoff: string;
  serviceType: string;
}

export function ShareEstimateDialog({ 
  open, 
  onOpenChange, 
  fareResult, 
  pickup, 
  dropoff, 
  serviceType 
}: ShareEstimateDialogProps) {
  const { toast } = useToast();
  const [clientPhone, setClientPhone] = useState('');
  const [clientEmail, setClientEmail] = useState('');
  const [copied, setCopied] = useState(false);

  // Generate shareable estimate text
  const generateEstimateText = () => {
    const surgeText = fareResult.surge ? ` (${fareResult.surge}x surge pricing)` : '';
    
    return `🚗 Prime Rides - Trip Estimate

📍 From: ${pickup}
📍 To: ${dropoff}
📊 Service: ${serviceType.charAt(0).toUpperCase() + serviceType.slice(1)}

💰 FARE BREAKDOWN:
• Base Fare: $${fareResult.breakdown.base.toFixed(2)}
• Distance (${fareResult.distance.toFixed(1)}km): $${fareResult.breakdown.distance.toFixed(2)}
• Time (${Math.round(fareResult.duration)}min): $${fareResult.breakdown.time.toFixed(2)}
${fareResult.breakdown.surge ? `• Surge Charge: $${fareResult.breakdown.surge.toFixed(2)}` : ''}

🏁 TOTAL ESTIMATE: $${fareResult.totalFare.toFixed(2)}${surgeText}

📞 Book with Biniam: +1 (604) 728-1620
📧 Email: bigmedusa2006@gmail.com

⭐ Prime Rides - Serving Metro Vancouver Since 2020`;
  };

  // Generate shareable link
  const generateShareableLink = () => {
    const estimateData = {
      pickup,
      dropoff,
      serviceType,
      distance: fareResult.distance,
      duration: fareResult.duration,
      totalFare: fareResult.totalFare,
      breakdown: fareResult.breakdown,
      surge: fareResult.surge
    };
    
    const encodedData = btoa(JSON.stringify(estimateData));
    return `${window.location.origin}/estimate/${encodedData}`;
  };

  const estimateText = generateEstimateText();
  const shareableLink = generateShareableLink();

  const handleCopyText = async () => {
    try {
      await navigator.clipboard.writeText(estimateText);
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
      toast({
        title: "Copied!",
        description: "Estimate text copied to clipboard",
      });
    } catch (error) {
      toast({
        title: "Copy Failed",
        description: "Unable to copy to clipboard",
        variant: "destructive",
      });
    }
  };

  const handleCopyLink = async () => {
    try {
      await navigator.clipboard.writeText(shareableLink);
      toast({
        title: "Link Copied!",
        description: "Shareable link copied to clipboard",
      });
    } catch (error) {
      toast({
        title: "Copy Failed",
        description: "Unable to copy link",
        variant: "destructive",
      });
    }
  };

  const handleWhatsAppShare = () => {
    const phoneNumber = clientPhone.replace(/\D/g, ''); // Remove non-digits
    const encodedText = encodeURIComponent(estimateText);
    
    if (phoneNumber) {
      // Share to specific number
      window.open(`https://wa.me/1${phoneNumber}?text=${encodedText}`, '_blank');
    } else {
      // Open WhatsApp with text
      window.open(`https://wa.me/?text=${encodedText}`, '_blank');
    }
  };



  const handleEmailShare = () => {
    const subject = encodeURIComponent('Prime Rides - Trip Estimate');
    const body = encodeURIComponent(estimateText);
    
    if (clientEmail) {
      window.open(`mailto:${clientEmail}?subject=${subject}&body=${body}`, '_blank');
    } else {
      window.open(`mailto:?subject=${subject}&body=${body}`, '_blank');
    }
  };

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-lg max-h-[90vh] overflow-y-auto bg-white dark:bg-gray-900" aria-describedby="share-estimate-description">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2 text-gray-900 dark:text-white">
            <Share2 className="w-5 h-5" />
            Share Trip Estimate
          </DialogTitle>
          <p id="share-estimate-description" className="text-sm text-gray-600 dark:text-gray-400">
            Share this fare estimate with your client through various channels
          </p>
        </DialogHeader>

        <div className="space-y-6">
          {/* Estimate Summary */}
          <div className="p-4 bg-green-50 dark:bg-green-900/20 rounded-lg border border-green-200 dark:border-green-800">
            <div className="flex items-center justify-between mb-2">
              <span className="font-medium text-green-800 dark:text-green-300">Trip Estimate</span>
              <Badge variant="secondary">{serviceType}</Badge>
            </div>
            <div className="text-2xl font-bold text-green-600 dark:text-green-400">
              ${fareResult.totalFare.toFixed(2)}
            </div>
            <div className="text-sm text-green-700 dark:text-green-300">
              {fareResult.distance.toFixed(1)}km • {Math.round(fareResult.duration)}min
            </div>
          </div>

          {/* Client Contact Info */}
          <div className="space-y-3">
            <h4 className="font-medium text-gray-900 dark:text-white">Client Contact (Optional)</h4>
            <div className="grid grid-cols-1 gap-3">
              <div>
                <Label htmlFor="clientPhone" className="text-sm text-gray-700 dark:text-gray-300">
                  Phone Number
                </Label>
                <Input
                  id="clientPhone"
                  placeholder="(604) 123-4567"
                  value={clientPhone}
                  onChange={(e) => setClientPhone(e.target.value)}
                  className="bg-white dark:bg-gray-800"
                />
              </div>
              <div>
                <Label htmlFor="clientEmail" className="text-sm text-gray-700 dark:text-gray-300">
                  Email Address
                </Label>
                <Input
                  id="clientEmail"
                  type="email"
                  placeholder="client@example.com"
                  value={clientEmail}
                  onChange={(e) => setClientEmail(e.target.value)}
                  className="bg-white dark:bg-gray-800"
                />
              </div>
            </div>
          </div>

          {/* Quick Share Buttons */}
          <div className="space-y-3">
            <h4 className="font-medium text-gray-900 dark:text-white">Quick Share</h4>
            <div className="grid grid-cols-2 gap-3">
              <Button 
                onClick={handleWhatsAppShare}
                className="flex items-center gap-2 bg-green-600 hover:bg-green-700"
              >
                <MessageCircle className="w-4 h-4" />
                WhatsApp
              </Button>
              

              
              <Button 
                onClick={handleEmailShare}
                variant="outline"
                className="flex items-center gap-2"
              >
                <Mail className="w-4 h-4" />
                Email
              </Button>
              
              <Button 
                onClick={handleCopyText}
                variant="outline"
                className="flex items-center gap-2"
              >
                {copied ? (
                  <Check className="w-4 h-4 text-green-600" />
                ) : (
                  <Copy className="w-4 h-4" />
                )}
                Copy Text
              </Button>
            </div>
          </div>

          {/* Shareable Link */}
          <div className="space-y-3">
            <h4 className="font-medium text-gray-900 dark:text-white">Shareable Link</h4>
            <div className="flex gap-2">
              <Input
                value={shareableLink}
                readOnly
                className="bg-gray-50 dark:bg-gray-800 text-sm"
              />
              <Button
                size="sm"
                variant="outline"
                onClick={handleCopyLink}
                className="shrink-0"
              >
                <Copy className="w-4 h-4" />
              </Button>
              <Button
                size="sm"
                variant="outline"
                onClick={() => window.open(shareableLink, '_blank')}
                className="shrink-0"
              >
                <ExternalLink className="w-4 h-4" />
              </Button>
            </div>
            <p className="text-xs text-gray-500 dark:text-gray-400">
              Clients can view this estimate without the app
            </p>
          </div>

          {/* Preview Text */}
          <div className="space-y-3">
            <h4 className="font-medium text-gray-900 dark:text-white">Message Preview</h4>
            <Textarea
              value={estimateText}
              readOnly
              rows={8}
              className="bg-gray-50 dark:bg-gray-800 text-sm resize-none"
            />
          </div>

          {/* Action Buttons */}
          <div className="flex gap-3 pt-4">
            <Button 
              variant="outline" 
              onClick={() => onOpenChange(false)}
              className="flex-1"
            >
              Close
            </Button>
            <Button 
              onClick={handleCopyText}
              className="flex-1 bg-blue-600 hover:bg-blue-700"
            >
              Copy & Close
            </Button>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  );
}